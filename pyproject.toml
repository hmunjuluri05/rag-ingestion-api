[project]
name = "rag-ingetion-api"
version = "0.1.0"
description = "Multi-cloud RAG ingestion API with document extraction, chunking, and deduplication"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
keywords = ["rag", "document-extraction", "llm", "ingestion", "azure", "gcp"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]

dependencies = [
    # API Framework
    "fastapi>=0.110.0",
    "uvicorn[standard]>=0.27.0",
    "pydantic>=2.6.0",
    "python-multipart>=0.0.9",
    # Task Queue
    "celery>=5.3.0",
    "flower>=2.0.0",
    "redis>=5.0.0",
    # Cloud Storage (Multi-cloud)
    "azure-storage-blob>=12.19.0",
    "google-cloud-storage>=2.14.0",
    # Document Extraction
    "unstructured>=0.12.0",
    "python-docx>=1.1.0",
    "PyMuPDF>=1.23.0",
    "pillow>=10.0.0",
    "markdownify>=0.11.0",
    # Azure Document Intelligence (optional for advanced extraction)
    "langchain-community>=0.2.0",
    "azure-ai-documentintelligence>=1.0.0",
    # Text Chunking
    "langchain>=0.1.0",
    "langchain-text-splitters>=0.0.1",
    "tiktoken>=0.5.0",
    # Deduplication
    "datasketch>=1.6.0",
    # Utilities
    "httpx>=0.26.0",
    "tenacity>=8.2.0",
    "python-dotenv>=1.0.0",
    # Monitoring
    "prometheus-client>=0.19.0",
    # Test document generation
    "reportlab>=4.0.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "black>=24.0.0",
    "ruff>=0.3.0",
    "mypy>=1.8.0",
    "pre-commit>=3.6.0",
]

# OCR support for Unstructured
ocr = [
    "pytesseract>=0.3.10",
    "pdf2image>=1.16.0",
]

# All optional dependencies
all = [
    "rag-ingetion-api[dev,ocr]",
]

[project.scripts]
compare-extractors = "rag_ingetion_api.compare_extractors:main"
generate-test-docs = "rag_ingetion_api.generate_test_docs:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/rag_ingetion_api"]

[tool.uv]
dev-dependencies = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-cov>=4.1.0",
    "black>=24.0.0",
    "ruff>=0.3.0",
    "mypy>=1.8.0",
]

[tool.black]
line-length = 100
target-version = ['py311']

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --cov=. --cov-report=term-missing"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
